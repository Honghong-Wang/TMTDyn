function par = save_eom_mex( par , analysis )
fprintf( 'generate EOM_mex... \n' )
par.elapsed_time = [ par.elapsed_time toc( par.timer ) ] ;
toc( par.timer )

par_mex = par ;
par_mex.fig = [] ; par.par_mex = [] ;
par_fields = fieldnames( par_mex ) ;
for i = 1 : numel( par_fields )
    if isa( par_mex.(par_fields{i}) , 'matlab.ui.Figure' ) || isa( par_mex.(par_fields{i}) , 'sym' ) || isa( par_mex.(par_fields{i}) , 'VideoWriter' )
        par_mex = rmfield( par_mex , par_fields{i} ) ;
    end
end

if analysis == 0 % equil. (static) sym.
	string_1 = [
		'function fval = EOM_eq ( z )' newline ...
		'global par_i' newline ...
		'par = par_i ;' newline ...
        'par.t_equil_i;' newline ....
		'z = [ z 0*z ]'' ;' newline ...
		newline ...
		'u = z( par.nq + par.nlambda + 1 : end ) ;' newline ...
		'uq = u( 1 : par.nq ) ;' newline ...
		newline ...
		'[ z , par ] = int_mid_step( par.t_equil_i , z , par ) ;' newline ... % integration mid-step
		newline ...
		'fj_k = fj_kF( par.var , z.'' ) ; ' newline ... % state stiffness/input
		'fj_vd = fj_vdF( par.var , z.'' ) ;' newline ...
		'fj_in = fj_inF( par.var , z.'' ) ;' newline ] ;
else % dyn. sim.
	string_1 = [
		'function dz = EOM ( t , z , par )' newline ...
		'global t_report' newline ...
		'if t > t_report' newline ...
		'    t ' newline ... % report time
		'    t_report = t + par.t_rep ; ' newline ... % report once
		'end' newline ...
        't ;' newline ...
		newline ...
		'u = z( par.nq + par.nlambda + 1 : end ) ;' newline ...
		'uq = u( 1 : par.nq ) ;' newline ...
		newline ...
		'[ z , par ] = int_mid_step( t , z , par ) ;' newline ... % integration mid-step
		newline ...
		'fj_k = fj_kF( par.var , z.'' ) ; ' newline ... % state stiffness/input
		'fj_vd = fj_vdF( par.var , z.'' ) ;' newline ...
		'fj_in = fj_inF( par.var , z.'' ) ;' newline ] ;
end

% EOM_text = fopen( 'EOM_text.m' ) ;
% string_1  = fread( EOM_text , '*char' )' ;
% fclose( EOM_text ) ;

string_all = [ string_1 newline ...
    'TMT = zeros(' num2str(par_mex.nq) ',' num2str(par_mex.nq) ') ; TMfd = zeros(' num2str(par_mex.nq) ',1) ;' newline ...
    'w_vd_j = zeros(' num2str(par_mex.nq) ',1) ; w_sd = zeros(' num2str(par_mex.nq) ',1) ; w_in = zeros(' num2str(par_mex.nq) ',1) ;' newline ...
    'w_f = zeros(' num2str(par_mex.nq) ',1) ;' newline ...
	'Tc = [] ; dc = [] ;' newline  ] ;

for i = 1 : par_mex.n_m
    string_all = [ string_all newline ...
        's0 = 1e-6 ;' newline ...
        'ds = par.rom.mass(' num2str(i) ') / par.n_int ;' newline ...
        'if par.rom.mass(' num2str(i) ') == 0 ; ds = 1 ; s0 = 0 ; end' newline ...
        'for s = s0 : ds : par.rom.mass(' num2str(i) ') - s0' newline ...
        '    [ M , T , Dd , fg ] = massF' num2str(i) '( par.var , z.'' , s ) ;' newline ...
        '    TMT = TMT + T.'' * M * T * ds ;' newline ...
        '    TMfd = TMfd + T.'' * M * ( - Dd * uq + fg ) * ds ;' newline ...
        'end' newline ] ;
end

for i = par_mex.nq + 1 : par_mex.n_sd
    string_all = [ string_all newline ...
        's0 = 1e-6 ;' newline ...
        'ds = par.rom.sprdmp(' num2str(i) ') / par.n_int ;' newline ...
        'if par.rom.sprdmp(' num2str(i) ') == 0 ; ds = 1 ; s0 = 0 ; end' newline ...
        'for s = s0 : ds : par.rom.sprdmp(' num2str(i) ') - s0' newline ...
        '    [ Tt , kx , vd , in ] = sprdmpF' num2str(i) '( par.var , z.'' , s ) ;' newline ...
        '    w_vd_j = w_vd_j + Tt * vd * ds ;' newline ...
        '    w_sd = w_sd + Tt * kx * ds ;' newline ...
        '    w_in = w_in + Tt * in * ds ;' newline ...
        'end' newline ] ;
end

for i = 1 : par_mex.n_ex
    string_all = [ string_all newline ...
        '[ Ttf , ftau_ex ] = loadsF' num2str(i) '( par.var , z.'' , 0 ) ;' newline ...
        'w_f = w_f + Ttf * ftau_ex ;' newline ] ;
end

for i = 1 : par_mex.n_cn
    string_all = [ string_all newline ...
        '[ tc , Dc , in ] = cnstF' num2str(i) '( par.var , z.'' , 0 ) ;' newline ...
        'Tc = [ Tc ; tc ] ;' newline ...
        'dc = [ dc ; - Dc * uq + in ] ;' newline ] ;
end

if analysis == 0 % equil. (static) sym.
	string_all = [ string_all newline ... % in Cartesian space
		'%% EOM' newline ...
		'fval = [ (TMfd + fj_k + fj_in + w_sd + w_in + w_f ) ; dc ] ;' newline ] ;
% 	string_all = [ string_all newline ... % in state space
% 		'%% EOM' newline ...
% 		'TMT = [ TMT , Tc.'' ; Tc , zeros(' num2str(par_mex.n_cn) ',' num2str(par_mex.n_cn) ') ] ;' newline ...
% 		'd_eom = [ ( TMfd + fj_k + fj_in + w_sd + w_in + w_f ) ; dc ] ;' newline ...
% 		'fval = TMT \\ d_eom ;' newline ] ;
else % dyn. sim.
	string_all = [ string_all newline ...
		'%% EOM' newline ...
		'TMT = [ TMT , Tc.'' ; Tc , zeros(' num2str(par_mex.n_cn) ',' num2str(par_mex.n_cn) ') ] ;' newline ...
		'd_eom = [ ( TMfd + fj_k + fj_vd + fj_in + w_sd + w_in + w_vd_j + w_f ) ; dc ] ;' newline ...
		'dzt = TMT \\ d_eom ;' newline newline ...
		'dz = [ u ; dzt ];' ] ;
end

%  write m-file
if analysis == 0 % equil. (static) sym.
    global par_i
    par_i = par_mex ;
    EOM_m = fopen( 'code/EOM_eq.m', 'wt' ) ;
    fprintf( EOM_m , string_all ) ;
    fclose( EOM_m ) ;
    % mex
    if par_mex.equil == 2
        vars_mex = { zeros( 1 , ( par_mex.nq + par_mex.nlambda ) ) } ;
        cd code
        codegen EOM_eq -args vars_mex
        cd ..
    end
else % dyn sim
    EOM_m = fopen( 'code/EOM.m', 'wt' ) ;
    fprintf( EOM_m , string_all ) ;
    fclose( EOM_m ) ;
    % mex
    if par_mex.simdyn == 2
        vars_mex = { 0 , zeros( 1 , 2 * ( par_mex.nq + par_mex.nlambda ) )' , par_mex } ;
        cd code
        codegen EOM -args vars_mex
        cd ..
    end
end

par.par_mex = par_mex ;
fprintf( 'mex file generated. continue... \n' )
par.elapsed_time = [ par.elapsed_time toc( par.timer ) ] ;
toc( par.timer )


