function func_str = EOMCCode( func_count , par )

[ n_fun , ~ ] = size( func_count ) ;

output = [ ...
'// compile in matlab with:' newline ...
'// mex EOM_C.cpp ' ] ;

for i : n_fun
	output = [ output func_count{i}{1} '.cpp ' ] ;
end
output = [ output '-larmadillo -llapack ' newline ] ;
% output = [ output '-larmadillo -llapack_win64_MT' newline ] ;
output = [ output ...
	newline ...
	'#include <iostream>' newline ...
	'#include <armadillo>' newline ...
	'#include "mex.h"' newline ...
	newline ...
	'using namespace std ;' newline ...
	'using namespace arma ;' newline ...
	newline ] ;

for i : n_fun
	output = [ output func_count{i}{2} newline ] ;
end
output = [ output newline ...
	'// dzt = EOM_C( t , q , uq , par.var )' newline ...
	'void mexFunction ( int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[] )' newline ...
	newline ...
	'{' newline ...
	'    // inputs ' newline ...
	'    double *q = mxGetPr( prhs[1] ) ;' newline ...
	'    double *u = mxGetPr( prhs[2] ) ;' newline ...
	'    double *var = mxGetPr( prhs[3] ) ;' newline ...
	newline ...
	'	 int nql = ' num2str( par.nq + par.nlambda ) ' ;' newline ...
	newline ...
	'    mat uq( &u[0] , nql , 1 , false ) ;' newline ...
	' newline ...
	'    // output' newline ...
	'    plhs[0] = mxCreateDoubleMatrix( nql, 1, mxREAL );' newline ...
	'    double *dqt_out = mxGetPr( plhs[0] ) ;' newline ...
	newline ...
    '// matrices for rigid elements' newline ] ;
    
if par.n_m > 0
	output = [ output ...
		'mat TMT_dyn = zeros<mat>( ' num2str( par.nq ) ' , ' num2str( par.nq ) ' ) ;' newline ...
		'mat TMfd = zeros<mat>( ' num2str( par.nq ) ' , 1 ) ;' newline ] ;
	for i = 1 : par.n_m
		output = [ output ...
			'	mat M = ' sprintf('massM%i', i) '( var , q ) ;' newline ...
			'	mat T = ' sprintf('massT%i', i) '( var , q ) ;' newline ...
			'	mat Dd = ' sprintf('massDd%i', i) '( var , q ) ;' newline ...
			'	mat fg = ' sprintf('massFg%i', i) '( var , q ) ;' newline ...
			'	TMT_dyn = TMT_dyn + T.t() * M * T ; ' newline ...
			'	TMfd = TMfd + T.t() * M * ( - Dd * uq + fg ) ; ' newline ] ;
	end
end

if par.n_sd > 0
	output = [ output ...
		'mat w_vd_j = zeros<mat>( ' num2str( par.nq ) ' , ' num2str( par.nq ) ' ) ;' newline ...
		'mat w_sd = zeros<mat>( ' num2str( par.nq ) ' , 1 ) ;' newline ...
		'mat w_in = zeros<mat>( ' num2str( par.nq ) ' , 1 ) ;' newline ] ;
	for i = 1 : par.n_sd
		output = [ output ...
			'	mat Tt = ' sprintf('sprdmpTt%i', i) '( var , q ) ;' newline ...
			'	mat kx = ' sprintf('sprdmpKx%i', i) '( var , q ) ;' newline ...
			'	mat vd = ' sprintf('sprdmpVd%i', i) '( var , q ) ;' newline ...
			'	mat in = ' sprintf('sprdmpIn%i', i) '( var , q ) ;' newline ...
			'	w_vd_j = w_vd_j + Tt * vd ;' newline ...
			'	w_sd = w_sd + Tt * kx ;' newline ...
			'	w_in = w_in + Tt * in ;' newline ] ;
	end
end

if par.n_ex > 0
	output = [ output ...
		'mat w_f = zeros<mat>( ' num2str( par.nq ) ' , 1 ) ;' newline ] ;
	for i = 1 : par.n_ex
		output = [ output ...
			'	mat Ttf = ' sprintf('loadTt%i', i) '( var , q ) ;' newline ...
			'	w_f = w_f + Ttf * f_ex' sprintf('loadTt%i', i) ' ;' newline ] ;
	end
end

if par.n_cn > 0
	output = [ output ...
		'mat T_cnt = ' sprintf('cnstT%i.m', 1) '( var , q ) ;' newline ...
		'mat d_cnt = ' sprintf('cnstT%i.m', 1) '( var , q ) ;' newline ] ;
	if par.n_cn > 1
		for i = 2 : par.n_cn
			output = [ output ...
				'	mat T_tmp = ' sprintf('cnstT%i.m', i) '( var , q ) ;' newline ...
				'	mat d_tmp = ' sprintf('cnstT%i.m', i) '( var , q ) ;' newline ...
				'	join_cols( T_cnt , T_tmp ) ;' newline ...
				'	join_cols( d_cnt , d_tmp ) ;' newline ] ;
		end
	end
	output = [ output ...
		'    // TMT matrices' newline ...
		'	 mat TMT_sys = zeros<mat>( ' num2str( par.nq + par.nlambda ) ' , ' num2str( par.nq + par.nlambda ) ' ) ;' newline ...
		'	 TMT_sys( span(1,' num2str( par.nq ) '), span(1,' num2str( par.nq ) ') ) = TMT_dyn ;' newline ...
		'	 TMT_sys( span(' num2str( par.nq + 1 ) ',last_row), span(' num2str( par.nq + 1 ) ',last_col) ) = T_cnt.t() ;' newline ...
		newline ...
		'    mat d_dyn = TMfd + w_sd + w_in + w_vd_j * uq + w_f ;' newline ...
		'	 mat d_sys = zeros<mat>( ' num2str( par.nq + par.nlambda ) ' , 1 ) ;' newline ...
		'	 d_sys( span(1,' num2str( par.nq ) '), 0 ) = d_dyn ;' newline ...
		'	 d_sys( span(' num2str( par.nq + 1 ) ',last_row), 0 ) = d_cnt.t() ;' newline ...
		newline ...
		'    mat dqt = solve( TMT_sys , d_sys ) ;' newline ] ;
else
	output = [ output ...
		'    // TMT matrices' newline ...
		'    mat d_dyn = TMfd + w_sd + w_in + w_vd_j * uq + w_f ;' newline ...
		'    mat dqt = solve( TMT_dyn , d_dyn ) ;' newline ] ;	
end
	
	
output = [ output newline ...
    '    // assign output' newline ...
    '    for( int i = 0 ; i < nql ; i++ )' newline ...
    '        dqt_out[i] = dqt(i,0) ;' newline ...
    newline ...
    '    return ;' newline ...
    '}' ] ;

output_file = fopen( 'EOM_C.cpp','wt') ;
fwrite( output_file , output ) ;
fclose ( output_file ) ;



