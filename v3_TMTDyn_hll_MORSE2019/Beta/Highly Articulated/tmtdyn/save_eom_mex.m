function par = save_eom_mex( par , analysis )
global par_mex

fprintf( 'generate EOM_mex... \n' )
par.elapsed_time = [ par.elapsed_time toc( par.timer ) ] ;
toc( par.timer )

% par_mex
par_mex = par.par_mex ;

if analysis == 0 % equil. (static) sym.
	string_1 = [
		'function res = EOM_eq ( z )' newline ...
		'global par_mex' newline ...
        'par_mex.t_equil_i;' newline ....
		'z = [ z 0*z ]'' ;' newline ...
		newline ...
		'u = z( ' num2str( par.nq ) ' + ' num2str( par.nlambda ) ' + 1 : end ) ;' newline ...
		'uq = u( 1 : ' num2str( par.nq ) ' ) ;' newline ...
		newline ...
		'[ z , par_mex ] = int_mid_step( par_mex.t_equil_i , z , par_mex ) ;' newline ... % integration mid-step
		newline ...
		'fj_k = fj_kF( par_mex.var , z.'' ) ; ' newline ... % state stiffness/input
		'fj_vd = fj_vdF( par_mex.var , z.'' ) ;' newline ...
		'fj_in = fj_inF( par_mex.var , z.'' ) ;' newline ] ;
else % dyn. sim.
    switch par.solver
        case 1 % Matlab ODE solver
            string_1 = [
                'function dz = EOM ( t , z , par_mex )' ] ;
        case 2 % Sundials ODE solver
            string_1 = [
                'function [ dz , flag , new_data ] = EOM ( t , z , par_mex )' ] ;
        case 3 % Sundials DAE
            string_1 = [
                'function [ res , flag , new_data ] = EOM ( t , z , dz , par_mex )' ] ;
    end
    if par.t_rep ~= 0
	string_1 = [ string_1 newline ...
        newline ...
		'global t_report' newline ...
		'if t > t_report' newline ...
		'    t ' newline ... % report time
		'    t_report = t + ' num2str( par.t_rep ) ' ; ' newline ... % report once
		'end' ] ;
    end
	string_1 = [ string_1 newline ...
        ...'t ' newline ...
		newline ...
		'u = z( ' num2str( par.nq ) ' + ' num2str( par.nlambda ) ' + 1 : end ) ;' newline ...
		'uq = u( 1 : ' num2str( par.nq ) ' ) ;' newline ...
		newline ...
		'[ z , par_mex ] = int_mid_step( t , z , par_mex ) ;' newline ... % integration mid-step
		newline ...
		'fj_k = fj_kF( par_mex.var , z.'' ) ; ' newline ... % state stiffness/input
		'fj_vd = fj_vdF( par_mex.var , z.'' ) ;' newline ...
		'fj_in = fj_inF( par_mex.var , z.'' ) ;' newline ] ;
end

% EOM_text = fopen( 'EOM_text.m' ) ;
% string_1  = fread( EOM_text , '*char' )' ;
% fclose( EOM_text ) ;

string_all = [ string_1 newline ...
    'TMT = zeros(' num2str(par.nq) ',' num2str(par.nq) ') ; TMfd = zeros(' num2str(par.nq) ',1) ;' newline ...
    'w_vd_j = zeros(' num2str(par.nq) ',1) ; w_sd = zeros(' num2str(par.nq) ',1) ; w_in = zeros(' num2str(par.nq) ',1) ;' newline ...
    'w_f = zeros(' num2str(par.nq) ',1) ;' newline ...
	'Tc = [] ; dc = [] ;' newline  ] ;

s0 = 1e-6 ;
for i = 1 : par.n_m
    if par.rom.mass(i) == 0
        string_all = [ string_all newline ...
            '[ M , T , Dd , fg ] = massF' num2str(i) '( par_mex.var , z.'' , 0 ) ;' newline ...
            'TMT = TMT + T.'' * M * T ;' newline ...
            'TMfd = TMfd + T.'' * M * ( - Dd * uq + fg ) ;' newline ] ;
    else
        ds = par.rom.mass(i) / par.n_int ;
        string_all = [ string_all newline ...
            'for s = ' num2str( s0 ) ' : ' num2str( ds ) ' : ' num2str( par.rom.mass(i) - s0 ) newline ...
            '    [ M , T , Dd , fg ] = massF' num2str(i) '( par_mex.var , z.'' , s ) ;' newline ...
            '    TMT = TMT + T.'' * M * T * ' num2str( ds ) ' ;' newline ...
            '    TMfd = TMfd + T.'' * M * ( - Dd * uq + fg ) * ' num2str( ds ) ' ;' newline ...
            'end' newline ] ;
    end
end

for i = par.nq + 1 : par.n_sd
    if par.rom.sprdmp(i) == 0
        string_all = [ string_all newline ...
            '[ Tt , kx , vd , in ] = sprdmpF' num2str(i) '( par_mex.var , z.'' , 0 ) ;' newline ...
            'w_vd_j = w_vd_j + Tt * vd ;' newline ...
            'w_sd = w_sd + Tt * kx ;' newline ...
            'w_in = w_in + Tt * in ;' newline ] ;
    else
        ds = par.rom.sprdmp(i) / par.n_int ;
        string_all = [ string_all newline ...
            'for s = ' num2str( s0 ) ' : ' num2str( ds ) ' : ' num2str( par.rom.sprdmp(i) - s0 ) newline ...
            '    [ Tt , kx , vd , in ] = sprdmpF' num2str(i) '( par_mex.var , z.'' , s ) ;' newline ...
            '    w_vd_j = w_vd_j + Tt * vd * ' num2str( ds ) ' ;' newline ...
            '    w_sd = w_sd + Tt * kx * ' num2str( ds ) ' ;' newline ...
            '    w_in = w_in + Tt * in * ' num2str( ds ) ' ;' newline ...
            'end' newline ] ;
    end
end

for i = 1 : par.n_ex
    string_all = [ string_all newline ...
        '[ Ttf , ftau_ex ] = loadsF' num2str(i) '( par_mex.var , z.'' , 0 ) ;' newline ...
        'w_f = w_f + Ttf * ftau_ex ;' newline ] ;
end

for i = 1 : par.n_cn
    string_all = [ string_all newline ...
        '[ tc , Dc , in ] = cnstF' num2str(i) '( par_mex.var , z.'' , 0 ) ;' newline ...
        'Tc = [ Tc ; tc ] ;' newline ...
        'dc = [ dc ; ( - Dc * uq + in ) ] ;' newline ] ;
end

if analysis == 0 % equil. (static) sym.
	string_all = [ string_all newline ... % in Cartesian space
		'%% EOM' newline ...
		'res = [ (TMfd + fj_k + fj_in + w_sd + w_in + w_f ) ; dc ] ;' newline ] ;
        % string_all = [ string_all newline ... % in state space
        %     '%% EOM' newline ...
        %     'TMT = [ TMT , Tc.'' ; Tc , zeros(' num2str(par_mex.n_cn) ',' num2str(par_mex.n_cn) ') ] ;' newline ...
        %     'd_eom = [ ( TMfd + fj_k + fj_in + w_sd + w_in + w_f ) ; dc ] ;' newline ...
        %     'res = TMT \\ d_eom ;' newline ] ;
else % dyn. sim.
    string_all = [ string_all newline ...
        '%% EOM' newline ...
        'TMTb = [ TMT , -Tc.'' ; ' newline ...
        '        Tc  , zeros(' num2str(par.n_cn) ',' num2str(par.n_cn) ') ] ;' newline ...
        'd_eom = [ ( TMfd + fj_k + fj_vd + fj_in + w_sd + w_in + w_vd_j + w_f ) ; dc ] ;' newline ...
        newline ...
        ...'dY = u ;' ] ;
        'dY = [ eye(' num2str(par.nq) ',' num2str(par.nq) ') , -Tc.'' ; ' newline ...
        '       Tc , zeros(' num2str(par.n_cn) ',' num2str(par.n_cn) ') ] * u ;' ] ;
    switch par.solver 
        case { 1 , 2 } % Matlab & Sundials ODE
            string_all = [ string_all newline ...
                ...'dzt = TMTb \\ d_eom ;' newline newline ...
                'ddY = pinv( TMTb ) * d_eom ;' newline ...
                newline ...
                'dz = [ dY ; ddY ];' ] ;
            if par.solver == 2 % Sundials ODE solver
                string_all = [ string_all newline ...
                    'flag = 0;' newline ...
                    'new_data = [];' ] ;
            end
        case 3 % Sundials DAE
            string_all = [ string_all newline ...
                newline ...
                'res = [ ( dz( 1 : ' num2str( par.nq ) ' + ' num2str( par.nlambda ) ' ) - dY ) ; ' newline ...
                '        ( TMTb * dz( ' num2str( par.nq ) ' + ' num2str( par.nlambda ) ' + 1 : end ) - d_eom ) ] ;' newline ...
                'flag = 0;' newline ...
                'new_data = [];' ] ;
    end
        
end

%  write m-file
if analysis == 0 % equil. (static) sym.
    EOM_m = fopen( 'eom/EOM_eq.m', 'wt' ) ;
    fprintf( EOM_m , string_all ) ;
    fclose( EOM_m ) ;
    % mex
    if par.equil == 2
        vars_mex = { zeros( 1 , ( par.nq + par.nlambda ) ) } ;
        cd eom
        codegen EOM_eq -args vars_mex
        cd ..
    end
else % dyn sim
    if analysis == 3 % for initial acceleration
        EOM_m = fopen( 'eom/EOM_0.m', 'wt' ) ;
    else
        EOM_m = fopen( 'eom/EOM.m', 'wt' ) ;
    end
    fprintf( EOM_m , string_all ) ;
    fclose( EOM_m ) ;
    % mex
    if par.dyn == 2
        switch par.solver
            case { 1 , 2 } % Matlab & Sundials ODE
                vars_mex = { 0 , zeros( 1 , 2 * ( par.nq + par.nlambda ) )' , par_mex } ;
            case 3 % Sundials DAE
                vars_mex = { 0 , zeros( 1 , 2 * ( par.nq + par.nlambda ) )' , zeros( 1 , 2 * ( par.nq + par.nlambda ) )' , par_mex } ;                
        end
        cd eom
        if analysis == 3 % for initial acceleration
            codegen EOM_0 -args vars_mex
        else
            codegen EOM -args vars_mex
        end
        cd ..
    end
end

fprintf( 'mex file generated. continue... \n' )
par.elapsed_time = [ par.elapsed_time toc( par.timer ) ] ;
toc( par.timer )


