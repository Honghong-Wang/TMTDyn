%% initialize
close all
clear all
format shorte
clc
pause( 1 )

addpath('./tmtdyn','./tmtdyn/sundials_matlab','./tmtdyn/radau','./tmtdyn/funcs','./hll','./eom');


%% parameters
n_p = 3 ; % polynomial order
n_tube = 2 ;
l_bs = [ 42, 136, 0 ] * 1e-3; % steel part of the base (no twist assumption)
l_b = [ 0, 0, 0 ] * 1e-3 ; % experiment base length: [most outer (1), ..., most inner (n)]
l_s = [ 10, 15, 30 ] * 1e-3 ; % experiment length: [l0_1 l0_2 l_s1]
% l_s = [ 40, 45, 30 ] * 1e-3 ; % random sim length: [l0_1 l0_2 l_s1]
r_s = 0.5 * ... % tube [ inner outer ] radius
    [  0.78-0.28, 0.94 ; % nitinol & wire
     3.2-2*35e-3,  3.2 ; % sheath
               0,    0 ] * 1e-3 ; % tube 3!

g_x = -9.81 ; g_y = 0 ; g_z = 0 ; % gravity
sigma_s = [ 6450 1000 ] ; % nitinol tube density

E_s = 1*[ 1+75, 1, 210 ] * 1e9 ; % PE polyethylene and nitinol and steel
G_s = 1*[ 0.33+25, 0.33, 70 ] * 1e9 ;
% G_s = E_s / 3;

mu_pow = 1 ; % < 1: rate thining, > 1: rate thikening
mu_E = 1e-1 * E_s ; % proportional damping
mu_G = 1e-1 * G_s;
mu_x = mu_G ; mu_y = mu_G ; mu_z = mu_E ;
mu_xx = mu_E ; mu_yy = mu_E ; mu_zz = mu_G ;

f_ex = 0.3;
kappa_t = 25; % 1/40e-3 or 1/27e-3


%% exp. readings
exp_case = 1;
[motor_in, tip_pos] = exp_v2(exp_case); % exp
% [motor_in, tip_pos] = exp_v0(exp_case); % random sim


%% variables
syms s sigma_s1_sym sigma_s2_sym E_s1_sym E_s2_sym E_s3_sym G_s1_sym G_s2_sym G_s3_sym ...
    r_s11_sym r_s12_sym r_s21_sym r_s22_sym r_s31_sym r_s32_sym ...
    mu_x1_sym mu_y1_sym mu_z1_sym mu_xx1_sym mu_yy1_sym mu_zz1_sym ...
    mu_x2_sym mu_y2_sym mu_z2_sym mu_xx2_sym mu_yy2_sym mu_zz2_sym ...
    mu_x3_sym mu_y3_sym mu_z3_sym mu_xx3_sym mu_yy3_sym mu_zz3_sym ...
    mu_pow_sym g_xsym g_ysym g_zsym ...
    l_b1_sym l_b2_sym l_b3_sym l_s1_sym l_s2_sym l_s3_sym ...
    dl1_sym dl2_sym dl3_sym ...
    f_u1_sym tau_u2_sym f_u3_sym tau_u4_sym f_u5_sym tau_u6_sym ...
    f_tx_sym f_ty_sym f_tz_sym tau_tx_sym tau_ty_sym tau_tz_sym ...
    l_ex_sym real
vars = [ sigma_s1_sym sigma_s2_sym E_s1_sym E_s2_sym E_s3_sym G_s1_sym G_s2_sym G_s3_sym ...
    r_s11_sym r_s12_sym r_s21_sym r_s22_sym r_s31_sym r_s32_sym ...
    mu_x1_sym mu_y1_sym mu_z1_sym mu_xx1_sym mu_yy1_sym mu_zz1_sym ...
    mu_x2_sym mu_y2_sym mu_z2_sym mu_xx2_sym mu_yy2_sym mu_zz2_sym ...
    mu_x3_sym mu_y3_sym mu_z3_sym mu_xx3_sym mu_yy3_sym mu_zz3_sym ...
    mu_pow_sym g_xsym g_ysym g_zsym ...
    l_b1_sym l_b2_sym l_b3_sym l_s1_sym l_s2_sym l_s3_sym ] ;
control_vars = [ dl1_sym dl2_sym dl3_sym ...
    f_u1_sym tau_u2_sym f_u3_sym tau_u4_sym f_u5_sym tau_u6_sym ...
    f_tx_sym f_ty_sym f_tz_sym tau_tx_sym tau_ty_sym tau_tz_sym ...
    l_ex_sym ] ;

var_vals = [sigma_s(1), sigma_s(2), E_s(1), E_s(2), E_s(3), G_s(1), G_s(2), G_s(3), r_s(1,1), r_s(1,2), r_s(2,1), r_s(2,2), r_s(3,1), r_s(3,2), ...
    mu_x(1), mu_y(1), mu_z(1), mu_xx(1), mu_yy(1), mu_zz(1), mu_x(2), mu_y(2), mu_z(2), mu_xx(2), mu_yy(2), mu_zz(2), mu_x(3), mu_y(3), mu_z(3), mu_xx(3), mu_yy(3), mu_zz(3), ...
    mu_pow, g_x, g_y, g_z, l_b(1) , l_b(2) ,l_b(3) ,l_s(1), l_s(2), l_s(3)] ;
control_var_vals = [0, kappa_t, f_ex, zeros(1,13)] ;

user_pars.n_t= n_p ;
user_pars.motor_in = motor_in ;
user_pars.tip_pos = tip_pos ;


%% simplified variables
% syms s dl1_sym dl2_sym dl3_sym ...
%     f_u1_sym tau_u2_sym f_u3_sym tau_u4_sym f_u5_sym tau_u6_sym ...
%     f_tx_sym f_ty_sym f_tz_sym tau_tx_sym tau_ty_sym tau_tz_sym real
% vars = [];
% control_vars = [ dl1_sym dl2_sym dl3_sym ...
%     f_u1_sym tau_u2_sym f_u3_sym tau_u4_sym f_u5_sym tau_u6_sym ...
%     f_tx_sym f_ty_sym f_tz_sym tau_tx_sym tau_ty_sym tau_tz_sym ] ;
% 
% var_vals = 0 ;
% control_var_vals = zeros(1,15) ;
% user_pars.n_t = n_p ;
% user_pars.motor_in = motor_in ;
% 
% g_xsym = g_x; g_ysym = g_y; g_zsym = g_z; sigma_s_sym = sigma_s ;
% r_s11_sym = r_s(1,1); r_s12_sym = r_s(1,2); r_s21_sym = r_s(2,1); r_s22_sym = r_s(2,2); r_s31_sym = r_s(3,1); r_s32_sym = r_s(3,2);
% 
% E_s1_sym = E_s(1); E_s2_sym = E_s(2); E_s3_sym = E_s(3); 
% G_s1_sym = G_s(1); G_s2_sym = G_s(2); G_s3_sym = G_s(3);
% mu_x1_sym = mu_x(1); mu_y1_sym = mu_y(1); mu_z1_sym = mu_z(1);
% mu_x2_sym = mu_x(2); mu_y2_sym = mu_y(2); mu_z2_sym = mu_z(2);
% mu_x3_sym = mu_x(3); mu_y3_sym = mu_y(3); mu_z3_sym = mu_z(3);
% mu_xx1_sym = mu_xx(1); mu_yy1_sym = mu_yy(1); mu_zz1_sym = mu_zz(1);
% mu_xx2_sym = mu_xx(2); mu_yy2_sym = mu_yy(2); mu_zz2_sym = mu_zz(2);
% mu_xx3_sym = mu_xx(3); mu_yy3_sym = mu_yy(3); mu_zz3_sym = mu_zz(3);
mu_pow_sym  = mu_pow;
% 
% l_s1_sym = l_s(1) ; l_s2_sym = l_s(2) ; l_s3_sym = l_s(3) ;
% l_b1_sym = l_b(1) ; l_b2_sym = l_b(2) ; l_b3_sym = l_b(3) ;

%% inputs
ftau_u = [ f_u1_sym tau_u2_sym f_u3_sym tau_u4_sym f_u5_sym tau_u6_sym ] ; % input loads, p is input torsion
f_e = [ f_tx_sym f_ty_sym f_tz_sym ] ;
tau_e = [ tau_tx_sym tau_ty_sym tau_tz_sym ];


%% steering curvature
kappa_y = 0 + ... % streight part
    ftau_u(6) * 1/(1+exp(-200*( s - (l_s1_sym+ftau_u(1)-l_s3_sym) ))) ; % bent part for s>(l_s1_sym+ftau_u(1)-l_s(1))


%% elasticity for catheter
E_s1 = E_s3_sym + ... % streight part
    ( E_s1_sym - E_s3_sym ) * 1/(1+exp(-200*( s - (l_s1_sym+ftau_u(1)-l_s3_sym) ))) ; % bent part for s>(l_s1_sym+ftau_u(1)-l_s(1))
G_s1 = G_s3_sym + ... % streight part
    ( G_s1_sym - G_s3_sym ) * 1/(1+exp(-200*( s - (l_s1_sym+ftau_u(1)-l_s3_sym) ))) ; % bent part for s>(l_s1_sym+ftau_u(1)-l_s(1))


%% preprocess
r_s_sym = [ r_s11_sym, r_s12_sym; r_s21_sym, r_s22_sym ; r_s31_sym, r_s32_sym ];
l_s_sym = [ l_s1_sym, l_s2_sym, l_s3_sym ];
l_b_sym = [ l_b1_sym, l_b2_sym, l_b3_sym ];
sigma_s_sym = [ sigma_s1_sym sigma_s2_sym ];
E_s_sym = [ E_s1, E_s2_sym, E_s3_sym ] ;
G_s_sym = [ G_s1, G_s2_sym, G_s3_sym ] ;
mu_x_sym = [ mu_x1_sym, mu_x2_sym, mu_x3_sym ];
mu_y_sym = [ mu_y1_sym, mu_y2_sym, mu_y3_sym ];
mu_z_sym = [ mu_z1_sym, mu_z2_sym, mu_z3_sym ];
mu_xx_sym = [ mu_xx1_sym, mu_xx2_sym, mu_xx3_sym ];
mu_yy_sym = [ mu_yy1_sym, mu_yy2_sym, mu_yy3_sym ];
mu_zz_sym = [ mu_zz1_sym, mu_zz2_sym, mu_zz3_sym ];

for i = 1 : n_tube % # of tubes
    % bent part
    a_aw = pi * ( r_s_sym(i,2).^ 2 - r_s_sym(i,1).^ 2 ) ; % no change
    m_ss(i) = a_aw * sigma_s_sym(i) ;  % manipulator mass
    I_aw =  [ 1 1 2 ] * 1 / 4 * pi * ( r_s_sym(i,2).^ 4 - r_s_sym(i,1).^ 4 ) ;
    K_v(i,:) = ( [ G_s_sym(i) G_s_sym(i) E_s_sym(i) ] ) * a_aw ; % to get deformation not strain 
    K_u(i,:) = ( [ E_s_sym(i) E_s_sym(i) G_s_sym(i) ] ) .* ( I_aw ) ; % to get angles not curvatures/torsion 
    mu_v(i,:) = ( [ mu_x_sym(i) mu_y_sym(i) mu_z_sym(i) ] ) * a_aw ; % to get deformation not strain 
    mu_u(i,:) = ( [ mu_xx_sym(i) mu_yy_sym(i) mu_zz_sym(i) ] ) .* ( I_aw ) ; % ( l_ss / lambda_sym ) to get angles not curvatures/torsion
    I_ss(:,:,i) = diag( sigma_s_sym(i) * pi * (r_s_sym(i,2).^2-r_s_sym(i,1).^2) * ...
                        [ 1/12*3*(r_s_sym(i,2).^2+r_s_sym(i,1).^2) , ...
                          1/12*3*(r_s_sym(i,2).^2+r_s_sym(i,1).^2) , ...
                          1/2*(r_s_sym(i,2).^2+r_s_sym(i,1).^2) ] ) ; % manipulator segment inertia
end


%% initial state:
i_knot = [11, 11]; % knot index in tube data
tube{1}(1,:) = linspace( 0, l_s(1), 18) ; % middle
tube{1}(4,:) = tube{1}(1,:) ; % x

tube{2}(1,:) = linspace( 0, l_s(2), 20) ; % inner
tube{2}(4,:) = tube{2}(1,:) ; % x

for i = 1 : n_tube % # of tubes
    sp_knot(i) = tube{i}(1,i_knot(i)) ;
    s_0{i} = tube{i}(1,:);
    rho_0{i} = tube{i}(2:4,:);
end

% sim. init. states
kappa = [ 1/131, 2/179 ] * 1e3 ;
for i = 1 : n_tube % # of tubes
    s_a0{i} = s_0{i} ;
    rho_a0{i} = rho_0{i} ;
%     s_a0{i} = [ linspace( 0, 1, 5 )*l_b_sym(i), l_b_sym(i)+linspace( 0, 1, 5 )*l_s_sym(i) ] ;
%     theta_a0(i,:) = [ linspace( 0, 1, 5 )*0, linspace( 0, 1, 5 )*kappa(i)*l_s_sym(i) ];
%     rho_a0{i}(:,:) = [ ( 1-cos( theta_a0(i,:) ) )/kappa(i) ;
%                       0*theta_a0(i,:);
%                      linspace( 0, 1, 5 )*l_b_sym(i), l_b_sym(i)+sin( linspace( 0, 1, 5 )*kappa(i)*l_s_sym(i) )/kappa(i) ] ; % should include s=0 if init_s is not defined
end


%% robot
results = ...
    tmtdyn()...
        .simulation()... % simulation
            .variables(vars, var_vals)...
            .control_variables(control_vars, control_var_vals)...
            .user_parameters(user_pars)...
            .derive_eom('no')... % 'full_system', 'assume_small_velocities', 'no'
                .plot_initial_conditions('final')... % 'all', 'final'
                .free_up_memory()...
                ...collect_terms('separate_structures')...
                .optimize_code()...
            .analysis()...
                ...static_sim('generate_mex_file', [2.55, 9.15, 18, 41])... % edited_m_file, generate_m_file, generate_mex_file, old_mex_file, generate_mex_file_from_edited_m_file
                .dynamic_sim('generate_m_file', 'external', 0, 25)... % matlab, sundials_ode, sundials_dae, radau, radau_mex, external
                .report_time_intervals(1e-2)...
                .results_sample_rate(1e2)...
                .spatial_integration_step(6e1)...
            .post_process()...
                .animate('show_frame')... % 'show_frame'
                .record_video()...
                .number_of_reports(1)...
                .run_user_code()...
        .world()... % world
            .g([g_xsym, g_ysym, g_zsym])...
        .robot('MOMOBOT')... % robot
            .body('growing')...
                .with_mass(m_ss(2))...
                .with_inertia(I_ss(:,:,2))...
                .connected()...
                    .rom()...
                        .default_order(n_p)...
                        .default_fit_type('spline_logistic_func', [ dl1_sym, l_s1_sym+ftau_u(1) ])...
                        .length(0, l_s2_sym+ftau_u(3))...
                        .reference_axial_locations(s_a0{2})...
                        .fixed_inital_values()...
                    .with_transformation_from_body()...
                        .translation([inf, inf, inf])...
                            .dof(1)...
                                .base_value(0)...
                                .base_director(0)...
                            .dof(2)...
                                .base_value(0)...
                                .base_director(0)...
                            .dof(3)...
                                .initial_value(rho_a0{2}(3,:))...
                                .base_value(0)...
                                .base_director(1)...
                        .rot_simple_curvilinear_frame([0, 0, 1])...
                        .rot_z()...                                
                            .base_value(0)...
                    .beam_stiffness()...
                        .coefficient([ K_v(2,:) K_u(2,:) ])...
                        .relaxed_state([0, 0, 1, 0, 0, 0])...
                    .beam_damping()...
                        .viscosity([ mu_v(2,:) mu_u(2,:) ])...
                        .power(mu_pow_sym)...
            .body('steering')...
                .with_mass(m_ss(1))...
                .with_inertia(I_ss(:,:,1))...
                .connected()...
                    .rom()...
                        .default_order(n_p)...)...
                        .default_fit_type('spline_logistic_func', [ dl1_sym, l_s1_sym+ftau_u(1) ])... % same as tube_2 to benefit from TMTDyn logistic function simplification
                        ...default_fit_type('spline_logistic_func', dl1_sym)... % less # of dofs but no logistic func simplification & steering body cannot be longer than growing body
                        .length(0, l_s1_sym+ftau_u(1))...
                        .fixed_inital_values()...
                    .with_transformation_from_body()...
                        .translation([inf, inf, inf])...
                            .dof(1)...
                                .similar_to_dof(1, 1, 1)... % [coeff, i_j, i_h, i_d]
                            .dof(2)...
                                .similar_to_dof(1, 1, 2)... % [coeff, i_j, i_h, i_d]
                            .dof(3)...
                                .similar_to_dof(1, 1, 3)... % [coeff, i_j, i_h, i_d]
                        .rot_simple_curvilinear_frame([0, 0, 1])...
                        .rot_z()...
                            .base_value(ftau_u(2))...
                    .beam_stiffness()...
                        .coefficient([ K_v(1,:) K_u(1,:) ])...
                        .relaxed_state([0, 0, 1, 0, kappa_y, 0])...
                    .beam_damping()...
                        .viscosity([ mu_v(1,:) mu_u(1,:) ])...
                        .power(mu_pow_sym)...
            .exload('body_point_load')...
                .exerted_on_body(1,1,l_ex_sym)... % [n_m, n_d, l_rom]
                .force(f_e)...
                .moment(tau_e)...
        .run();
    
    
% %% post-process
% post_process(results, motor_in, tip_pos);

